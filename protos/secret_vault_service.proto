syntax = "proto3";
package secret_vault;

service SecretVault {
    rpc GetConfig(GetConfigRequest) returns (GetConfigResponse);

    rpc CreateLocker (CreateLockerRequest) returns (CreateLockerResponse);
    rpc ReadLocker (ReadLockerRequest) returns (ReadLockerResponse);
    rpc InitiateLockerDeletion (InitiateLockerDeletionRequest)
        returns (InitiateLockerDeletionResponse);

//    rpc GetAuth (GetAuthRequest) returns (GetAuthResponse);
}

message GetConfigRequest {}
message GetConfigResponse {
    string config = 1;
}

message CommonContext {
    string vault_id = 1;
    string user_name = 2;
    string user_context = 3;
}

message CreateLockerRequest {
    CommonContext context = 1;
    string locker_id = 2;
    string locker_contents = 3;
}

message CreateLockerResponse {}

message ReadLockerRequest {
    CommonContext context = 1;
    string locker_id = 2;
}

message ReadLockerResponse {
    string locker_contents = 1;
}

message InitiateLockerDeletionRequest {
    CommonContext context = 1;
    string locker_id = 2;
}

message InitiateLockerDeletionResponse {}

//message GetAuthRequest {
//    CommonContext context = 1;
//}
//
//message GetAuthResponse {
//    string auth_token = 1;
//}

service SecretVaultAdmin {
    rpc GetAdminConfig(GetAdminConfigRequest) returns (GetAdminConfigResponse);

    rpc CreateVault(CreateVaultRequest) returns (CreateVaultResponse);
//    rpc ReadVault(ReadVaultRequest) returns (ReadVaultResponse);
//    rpc UpdateVault(UpdateVaultRequest) returns (UpdateVaultResponse);
    rpc DeleteVault (DeleteVaultRequest) returns (DeleteVaultResponse);

    // User CRUD for user type (ADMIN, USER)

    // TODO: Refactor for user
    rpc AddMetadata (AddMetadataRequest) returns (AddMetadataResponse);
    rpc RemoveMetadata (RemoveMetadataRequest) returns (RemoveMetadataResponse);
    rpc GetMetadata (GetMetadataRequest) returns (GetMetadataResponse);
    rpc UpdateMetadata (UpdateMetadataRequest) returns (UpdateMetadataResponse);

    rpc DeleteLocker(DeleteLockerRequest) returns (DeleteLockerResponse);
    rpc ResuscitateLocker(ResuscitateLockerRequest) returns (ResuscitateLockerResponse);
    rpc ListLockersInDelete(ListLockersInDeleteRequest) returns (ListLockersInDeleteResponse);

    // For now, locker count (be creative!)
    // rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse);
}

message GetAdminConfigRequest {}
message GetAdminConfigResponse {
    string config = 1;
}

message CreateVaultRequest {
    string vault_id = 1;
    // TODO: enum for all support authentication mechanisms
    // like SSO, 2FA, PKI.
    // For test: null-plugin which checks for existence for vault.
}

//message CreateUserRequest {
//    string user_id = 1;
//    string user_pub_cert = 2;
//}

message CreateVaultResponse {}

message DeleteVaultRequest {
    string vault_id = 1;
}

message DeleteVaultResponse {}

message AddMetadataRequest {
    string vault_id = 1;
    string name = 2;
    string value = 3;
}

message AddMetadataResponse {}

message RemoveMetadataRequest {
    string vault_id = 1;
    string name = 2;
}

message RemoveMetadataResponse {}

message GetMetadataRequest {
    string vault_id = 1;
    string name = 2;
}

message GetMetadataResponse {
    string value = 1;
}

message UpdateMetadataRequest {
    string vault_id = 1;
    string name = 2;
    string value = 3;
}

message UpdateMetadataResponse {}

message DeleteLockerRequest {
    string vault_id = 1;
    string locker_id = 2;
}

message DeleteLockerResponse {}

message ResuscitateLockerRequest {
    string vault_id = 1;
    string locker_id = 2;
}

message ResuscitateLockerResponse {};

message ListLockersInDeleteRequest {
    string vault_id = 1;
}

message ListLockersInDeleteResponse {
    repeated string lockers = 1;
}
